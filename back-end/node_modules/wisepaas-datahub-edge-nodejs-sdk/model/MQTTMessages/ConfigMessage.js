'use strict';
const BaseMessage = require('./BaseMessage');
const edgeEnum = require('../../common/enum');

class DObject {
  constructor () {
    this.Action = edgeEnum.actionType.create;
    this.Scada = {};
    this.ts = Date.now;
    return this;
  }
}

class ConfigMessage extends BaseMessage {
  constructor () {
    super();
    this.d = new Object();
    //this.ScadaObject = new ScadaObject();
    return this;
  }
}

class ScadaObject {
  constructor (nodeId, nodeConfig, heartBeat) {
    this.TID = 1;
    this.Des = nodeConfig.Scada.Description;
    this.Hbt = heartBeat / 1000;
    this.PID = 1;
    this.BID = 0;
    this.UTg = {};
    return this;
  }
}

class NodeObject {
  constructor (nodeId, nodeConfig, heartBeat) {
    this.Id = nodeId;
    this.Name = nodeConfig.node.name;
    if (nodeConfig.node.description) {
      this.Desc = nodeConfig.node.description;
    }
    this.Hbt = heartBeat / 1000;
    this.DeviceType = edgeEnum.nodeConfigType.node;// 這是固定的?
    this.Device = {};
    return this;
  }
}



class DeviceObject {
  constructor (deviceConfig) {
    this.Name = deviceConfig.name;
    this.Type = deviceConfig.type;
    if (deviceConfig.description) {
      this.Desc = deviceConfig.description;
    }
    if (deviceConfig.retentionPolicyName) {
      this.RP = deviceConfig.retentionPolicyName;
    }
    this.Tag = {};
    return this;
  }
}

class TagObject {
  constructor (tagType, tagConfig) {
    this.Name =  tagConfig.Name;
    this.TID = tagType;
    this.Dsc = tagConfig && tagConfig.Description ? tagConfig.Description : '';
    this.RO = tagConfig && tagConfig.ReadOnly ? 1 : 0;
    this.Ary = tagConfig && tagConfig.ArraySize ? tagConfig.ArraySize : 0;
  }
}

class AnalogTagObject extends TagObject {
  constructor (analogConfig) {
    super(edgeEnum.tagType.analog, analogConfig);
    this.Log = 1;
    this.SH = analogConfig && analogConfig.SpanHigh ? analogConfig.SpanHigh : 1000;
    this.SL = analogConfig && analogConfig.SpanHigh ? analogConfig.SpanHigh : 0;
    this.EU = analogConfig && analogConfig.EngineerUnit ? analogConfig.EngineerUnit : '';
    this.DSF = "4.2";
    this.Alm = false;
    return this;
  }
}

class DiscreteTagObject extends TagObject {
  constructor (discreteConfig) {
    super(edgeEnum.tagType.discrete, discreteConfig);
    if (discreteConfig && discreteConfig.state0 !== '') this.S0 = discreteConfig.state0;
    if (discreteConfig && discreteConfig.state1 !== '') this.S1 = discreteConfig.state1;
    if (discreteConfig && discreteConfig.state2 !== '') this.S2 = discreteConfig.state2;
    if (discreteConfig && discreteConfig.state3 !== '') this.S3 = discreteConfig.state3;
    if (discreteConfig && discreteConfig.state4 !== '') this.S4 = discreteConfig.state4;
    if (discreteConfig && discreteConfig.state5 !== '') this.S5 = discreteConfig.state5;
    if (discreteConfig && discreteConfig.state6 !== '') this.S6 = discreteConfig.state6;
    if (discreteConfig && discreteConfig.state7 !== '') this.S7 = discreteConfig.state7;
    return this;
  }
}

class TextTagObject extends TagObject {
  constructor (textConfig) {
    super(edgeEnum.tagType.text, textConfig);

    return this;
  }
}

module.exports = {
  ConfigMessage,
  NodeObject,
  ScadaObject,
  DeviceObject,
  AnalogTagObject,
  DiscreteTagObject,
  TextTagObject
};
